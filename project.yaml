# Modular Project Blueprint (YAML)
# ðŸ”¹ Break sections into separate files (use `!include`) for maintainability.

# 1. Core Project Definition (project.yaml)
project:
  name: "<Project Name>"            # e.g. "Customer Portal"
  description: "<Brief goals and scope>"
  version: "0.1.0"
  start_date: "YYYY-MM-DD"
  repository: "<Git repo URL>"
  license:
    type: "MIT"                   # e.g. MIT, Apache-2.0, Proprietary
    file: "LICENSE"
  authors:
    - name: "<Author Name>"
      role: "<e.g. Lead Engineer>"
      email: "<email@example.com>"

# 2. Tech Stack (tech.yaml)
!include tech.yaml

# 3. Environment & Secrets (env.yaml)
!include env.yaml

# 4. Architecture & Modules (architecture.yaml)
!include architecture.yaml

# 5. UI/UX & Design System (design.yaml)
!include design.yaml

# 6. Requirements
## 6.1 User Stories (stories.yaml)
!include stories.yaml

## 6.2 Acceptance Tests (acceptance.yaml)
!include acceptance.yaml

## 6.3 Performance SLAs (performance.yaml)
!include performance.yaml

# 7. Data Model (data_model.yaml)
!include data_model.yaml

# 8. Integrations & Services (integrations.yaml)
!include integrations.yaml

# 9. Observability & Ops (ops.yaml)
!include ops.yaml

# 10. CI/CD & Quality Gates (ci_cd.yaml)
!include ci_cd.yaml

# 11. Documentation & Onboarding (docs.yaml)
!include docs.yaml

# 12. Compliance & Security (security.yaml)
!include security.yaml

# 13. Governance & Maintenance (governance.yaml)
!include governance.yaml

# 14. JSON Schema Validation (schema.json)
# Use this schema in CI to validate all includes
schema:
  file: ".github/project.schema.json"

# 15. Directory Layout Suggestion
# â”œâ”€â”€ project.yaml
# â”œâ”€â”€ tech.yaml
# â”œâ”€â”€ env.yaml
# â”œâ”€â”€ architecture.yaml
# â”œâ”€â”€ design.yaml
# â”œâ”€â”€ stories.yaml
# â”œâ”€â”€ acceptance.yaml
# â”œâ”€â”€ performance.yaml
# â”œâ”€â”€ data_model.yaml
# â”œâ”€â”€ integrations.yaml
# â”œâ”€â”€ ops.yaml
# â”œâ”€â”€ ci_cd.yaml
# â”œâ”€â”€ docs.yaml
# â”œâ”€â”€ security.yaml
# â”œâ”€â”€ governance.yaml
# â”œâ”€â”€ .github/
# â”‚   â”œâ”€â”€ project.schema.json
# â”‚   â””â”€â”€ workflows/
# â”‚       â”œâ”€â”€ validate.yml
# â”‚       â””â”€â”€ deploy.yml

# Notes:
# â€¢ Each include file follows the same naming conventions and root keys.
# â€¢ Use YAML anchors (&) in sub-files to dedupe repeated structures.
# â€¢ Automate validation: `.github/workflows/validate.yml` runs JSON Schema lint.
# â€¢ Keep samples in `examples/` to demonstrate filled-out sections.
